// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SoccerStats.Data;

namespace SoccerStats.Data.Migrations
{
    [DbContext(typeof(SoccerStatsContext))]
    [Migration("20191220094625_changedmomenttostring")]
    partial class changedmomenttostring
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SoccerStats.Domain.Entities.Match", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AwayGoals")
                        .HasColumnType("int");

                    b.Property<int>("HomeGoals")
                        .HasColumnType("int");

                    b.Property<bool>("HomeTeam")
                        .HasColumnType("bit");

                    b.Property<DateTime>("MatchDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("Matches");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AwayGoals = 0,
                            HomeGoals = 1,
                            HomeTeam = true,
                            MatchDate = new DateTime(2019, 12, 13, 10, 46, 24, 891, DateTimeKind.Local).AddTicks(7882),
                            TeamId = 1
                        });
                });

            modelBuilder.Entity("SoccerStats.Domain.Entities.MatchMoment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MatchId")
                        .HasColumnType("int");

                    b.Property<string>("Moment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<int>("TimeStamp")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MatchId");

                    b.HasIndex("PlayerId");

                    b.ToTable("MatchMoments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            MatchId = 1,
                            Moment = "Goal",
                            PlayerId = 1,
                            TimeStamp = 30
                        },
                        new
                        {
                            Id = 2,
                            MatchId = 1,
                            Moment = "YellowCard",
                            PlayerId = 2,
                            TimeStamp = 40
                        },
                        new
                        {
                            Id = 3,
                            MatchId = 1,
                            Moment = "RedCard",
                            PlayerId = 3,
                            TimeStamp = 60
                        });
                });

            modelBuilder.Entity("SoccerStats.Domain.Entities.PlayerMatchResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Goals")
                        .HasColumnType("int");

                    b.Property<int>("MatchId")
                        .HasColumnType("int");

                    b.Property<int>("PlayTime")
                        .HasColumnType("int");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<int?>("RedCards")
                        .HasColumnType("int");

                    b.Property<int>("SubTime")
                        .HasColumnType("int");

                    b.Property<int?>("YellowCards")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MatchId");

                    b.HasIndex("PlayerId");

                    b.ToTable("PlayerMatchResults");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Goals = 1,
                            MatchId = 1,
                            PlayTime = 0,
                            PlayerId = 1,
                            RedCards = 0,
                            SubTime = 0,
                            YellowCards = 0
                        },
                        new
                        {
                            Id = 2,
                            Goals = 0,
                            MatchId = 1,
                            PlayTime = 0,
                            PlayerId = 2,
                            RedCards = 0,
                            SubTime = 0,
                            YellowCards = 1
                        },
                        new
                        {
                            Id = 3,
                            Goals = 0,
                            MatchId = 1,
                            PlayTime = 0,
                            PlayerId = 3,
                            RedCards = 1,
                            SubTime = 0,
                            YellowCards = 0
                        });
                });

            modelBuilder.Entity("SoccerStats.Domain.Entities.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("TeamName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Teams");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            TeamName = "DWO"
                        },
                        new
                        {
                            Id = 2,
                            TeamName = "Sick"
                        });
                });

            modelBuilder.Entity("SoccerStats.Domain.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BackNumber")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<byte[]>("Picture")
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("Players");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BackNumber = 7,
                            FirstName = "Nick",
                            LastName = "Sluiters",
                            TeamId = 1
                        },
                        new
                        {
                            Id = 2,
                            BackNumber = 1,
                            FirstName = "Jurgen",
                            LastName = "Paapen",
                            TeamId = 1
                        },
                        new
                        {
                            Id = 3,
                            BackNumber = 4,
                            FirstName = "Joost",
                            LastName = "Oomen",
                            TeamId = 1
                        });
                });

            modelBuilder.Entity("SoccerStats.Domain.Entities.Match", b =>
                {
                    b.HasOne("SoccerStats.Domain.Entities.Team", "Team")
                        .WithMany("Matches")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SoccerStats.Domain.Entities.MatchMoment", b =>
                {
                    b.HasOne("SoccerStats.Domain.Entities.Match", "Match")
                        .WithMany("MatchMoments")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SoccerStats.Domain.Player", "Player")
                        .WithMany("Moments")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("SoccerStats.Domain.Entities.PlayerMatchResult", b =>
                {
                    b.HasOne("SoccerStats.Domain.Entities.Match", "Match")
                        .WithMany("PlayerMatchResults")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SoccerStats.Domain.Player", "Player")
                        .WithMany("MatchResults")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("SoccerStats.Domain.Player", b =>
                {
                    b.HasOne("SoccerStats.Domain.Entities.Team", "Team")
                        .WithMany("Players")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
